/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package cleaner.app


import java.net.URI;

import ch.ethz.sis.openbis.generic.asapi.v3.IApplicationServerApi
import ch.systemsx.cisd.common.spring.HttpInvokerUtils
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.Sample
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.fetchoptions.SampleFetchOptions
import ch.ethz.sis.openbis.generic.asapi.v3.dto.sample.search.SampleSearchCriteria
import cleaner.chemicals.SourceMolecule
import cleaner.chemicals.cleanSourceMolecule
import cleaner.io.*
import cleaner.openbis.OpenbisPropertyMapping
import org.slf4j.LoggerFactory
import kotlinx.cli.*
import kotlinx.serialization.json.Json
import kotlinx.serialization.decodeFromString
import org.jetbrains.exposed.sql.Database
import org.jetbrains.kotlinx.dataframe.api.cast
import org.jetbrains.kotlinx.dataframe.api.map
import org.jetbrains.kotlinx.dataframe.api.toList
import org.jetbrains.kotlinx.dataframe.api.toMap
import org.jetbrains.kotlinx.dataframe.size
import java.io.File

fun createOpenbisInstance(instance: URI): IApplicationServerApi {
    val facade = HttpInvokerUtils.createServiceStub(
        IApplicationServerApi::class.java,
        instance.toString() + IApplicationServerApi.SERVICE_URL,
        10000
    )
    return facade

}


fun getObjectsInCollection(token: String, openbis: IApplicationServerApi, identifier: String): List<Sample> {
    val criteria = SampleSearchCriteria();
    criteria.withExperiment().withIdentifier().thatEquals(identifier);
    val fetchOptions = SampleFetchOptions();
    fetchOptions.withProperties();
    return openbis.searchSamples(token, criteria, fetchOptions).objects
}


enum class CommandLineModes(val type: String) {
    OPENBIS("openbis"),
    FILE("file")
}

fun initialiseDb(file: String): Database {
    return cleaner.io.getDb(file)
}


fun main(args: Array<String>) {
    val parser = ArgParser("chemicals cleaner")
    val inputChemicals by parser.argument(ArgType.String, description = "Input chemicals")
    val chemicalConfig by parser.argument(ArgType.String, description = "Molecule mapping")
    val nci by parser.argument(ArgType.String, description = "ChEBI Database in SDF Format (See: https://cactus.nci.nih.gov/download/nci/#release-4)")
    val dbFile by parser.argument(ArgType.String, description = "Path to SQLLite database")
    val reimportDB by parser.option(ArgType.Boolean, "reimport", description = "Force reimport database").default(false)
    parser.parse(args)
    //Initialise Logger
    val log = LoggerFactory.getLogger(parser.programName)
    log.info("Starting SQLLite DB")
    //Initialise SQL Lite db
    val db = initialiseDb(dbFile)
    log.info("DB started in ${db.url}")
    val chemicalsDbAvailable = checkChemicals(db)
    if (!chemicalsDbAvailable || reimportDB) {
        log.info("Chemicals DB not initialised or reimport required")
        createChemicals(db)
        log.info("Chemicals DB initialised")
        log.info("Loading chemicals from SDF into SQLite database ${db.url}")
        sdfToSQL(nci, db)
        log.info("Finished loading chemicals into SQLite database")
    }
    log.info("Processing input chemicals")
    val mapping = Json.decodeFromString<OpenbisPropertyMapping>(File(chemicalConfig).readText())
    val mappedColl = getMoleculesFromFile(File(inputChemicals), mapping).cast<SourceMolecule>()
    log.info("${mappedColl.rowsCount()} chemicals to process")
    val validMolecules = cleanSourceMolecule(db, mappedColl.map{SourceMolecule(it.toMap())})
    //log.info("${validMolecules.size} chemicals remaining after processing")

}
